import ollama
import json
from .models import AlertSummary
from .pydantic_schemas import ExtractedData  # 

def calculate_outbreak_risk(individuals):
    """
    Calculates the outbreak risk percentage and level.
    """
    if not individuals:
        return 0.0, "Very Low"

    total_individual_score = 0
    max_possible_score = 39  #  individual

    for person in individuals:
        s_individual = 0
        if person.severity == "Severe":
            s_individual += 10
        elif person.severity == "Moderate":
            s_individual += 5
        elif person.severity == "Mild":
            s_individual += 1

        if person.age < 10 or person.age > 60:
            s_individual += 5

        for symptom in person.symptoms:
            if symptom in ["Vomiting", "Diarrhea", "Fever"]:
                s_individual += 3

        if person.water_quality == "Poor":
            s_individual += 5

        if person.treatment_given == "None":
            s_individual += 10

        total_individual_score += s_individual

    avg_score = total_individual_score / len(individuals)
    r_outbreak = (avg_score / max_possible_score) * 100

    if r_outbreak > 80:
        level = "Very High"
    elif r_outbreak > 60:
        level = "High"
    elif r_outbreak > 40:
        level = "Moderate"
    elif r_outbreak > 20:
        level = "Low"
    else:
        level = "Very Low"

    return r_outbreak, level


def process_alert(alert_obj):
    """
    Takes an EarlyWarningAlert object, processes it with the model,
    calculates risk, generates a summary, and stores it in AlertSummary.
    """

    rbalert_text = alert_obj.rbalert

    #  Extract structured data
    extraction_prompt = f"""Analyze the following rule-based alert and extract structured JSON data 
according to this schema: {json.dumps(ExtractedData.model_json_schema(), indent=2)}

Alert:
{rbalert_text}

Output only the JSON, no extra text.
"""

    extraction_response = ollama.chat(
        model="gemma3:1b",
        messages=[{"role": "user", "content": extraction_prompt}],
        format="json",
        options={"temperature": 0},
    )

    extracted_data_json = extraction_response["message"]["content"]
    validated_data = ExtractedData.model_validate_json(extracted_data_json)

  #Calculate risk
    risk_percentage, risk_level = calculate_outbreak_risk(validated_data.individuals)

    #plain-language summary
    summary_prompt = f"""You are an analyst for the Ministry of the North Eastern Region.

Context:
- Original Alerts: {rbalert_text}
- Calculated Risk: {risk_level} ({risk_percentage:.1f}%)

Task:
Write a concise, clear, and actionable summary to guide ASHA and NGO workers.
Do NOT mention that this is generated by AI.
Do NOT include casual, metacommentary, explanations, or other information that is not relevant to the risk assessment.
Focus on instructions, recommendations, and what actions should be taken immediately.
Use professional, authoritative language as if issued by the Ministry.
"""

    summary_response = ollama.generate(
        model="gemma3:1b",
        prompt=summary_prompt,
        stream=False,
    )

    summary_output = summary_response["response"]

    AlertSummary.objects.create(
        alert=alert_obj,
        risk_percentage=risk_percentage,
        risk_level=risk_level,
        summary_text=summary_output,
    )

    return {
        "risk_percentage": risk_percentage,
        "risk_level": risk_level,
        "summary": summary_output,
    }

